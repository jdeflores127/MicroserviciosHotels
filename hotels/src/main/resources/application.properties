spring.datasource.url=jdbc:h2:mem:bookingdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=sa
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true

spring.jpa.show-sql=true

spring.jpa.hibernate.ddl-auto=update

server.port=8080
debug=true

#Configuracion para el servidor de configuracion externalizado
spring.application.name=hotels
spring.profiles.active=dev
#apuntamos a la ruta del microservicio, el optional indica que si el servicio no esta activo
#No detenga el arranque del servicio hotels
spring.cloud.config.enabled=true
spring.config.import=optional:configserver:http://localhost:8085/

#Propiedades para la suscripcion al servicio Eureka de descubrimiento
eureka.instance.prefer-ip-address=true
#Propiedad para registrarse en Eureka
eureka.client.register-with-eureka=true
#Busca informacion de registro en Eureka
eureka.client.fetch-registry=true
#Direccion del servidor Eureka
eureka.client.serviceUrl.defaultZone=http://localhost:8065/eureka/

#Propiedades para informacion cuando se consulte por actuator
info.app.name=Hotels microservices
info.app.descripcion=aplicacion para reservar habitaciones
info.app.version=1.0.0
#endpoint.shutdown.enable=true
management.endpoint.shutdown.enabled=true
#Expone todos los endpoint de actuator
management.endpoints.web.exposure.include=*
#muestra en el navegador la informacion del microservicio
management.info.env.enabled=true